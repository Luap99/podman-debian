This patch reverts commit e308ba0215baa95be5e177533adc1e15029e0869
Author: Miloslav Trmač <mitr@redhat.com>
Date:   Wed Jan 25 19:22:41 2023 +0100

    Vendor c/image after https://github.com/containers/image/pull/1816
    
    Also includes unreleased https://github.com/openshift/imagebuilder/pull/246 to work
    with the updated docker/docker dependency.
    
    And updates some references to newly deprecated docker/docker symbols.
    
    [NO NEW TESTS NEEDED]
    
    Signed-off-by: Miloslav Trmač <mitr@redhat.com>

Index: libpod/pkg/api/handlers/compat/system.go
===================================================================
--- libpod.orig/pkg/api/handlers/compat/system.go
+++ libpod/pkg/api/handlers/compat/system.go
@@ -11,7 +11,6 @@ import (
 	"github.com/containers/podman/v4/pkg/domain/entities"
 	"github.com/containers/podman/v4/pkg/domain/infra/abi"
 	docker "github.com/docker/docker/api/types"
-	"github.com/docker/docker/api/types/volume"
 )
 
 func GetDiskUsage(w http.ResponseWriter, r *http.Request) {
@@ -65,9 +64,9 @@ func GetDiskUsage(w http.ResponseWriter,
 		ctnrs[i] = &t
 	}
 
-	vols := make([]*volume.Volume, len(df.Volumes))
+	vols := make([]*docker.Volume, len(df.Volumes))
 	for i, o := range df.Volumes {
-		t := volume.Volume{
+		t := docker.Volume{
 			CreatedAt:  "",
 			Driver:     "",
 			Labels:     map[string]string{},
@@ -76,7 +75,7 @@ func GetDiskUsage(w http.ResponseWriter,
 			Options:    nil,
 			Scope:      "local",
 			Status:     nil,
-			UsageData: &volume.UsageData{
+			UsageData: &docker.VolumeUsageData{
 				RefCount: int64(o.Links),
 				Size:     o.Size,
 			},
Index: libpod/pkg/api/handlers/compat/volumes.go
===================================================================
--- libpod.orig/pkg/api/handlers/compat/volumes.go
+++ libpod/pkg/api/handlers/compat/volumes.go
@@ -56,14 +56,14 @@ func ListVolumes(w http.ResponseWriter,
 		utils.InternalServerError(w, err)
 		return
 	}
-	volumeConfigs := make([]*docker_api_types_volume.Volume, 0, len(vols))
+	volumeConfigs := make([]*docker_api_types.Volume, 0, len(vols))
 	for _, v := range vols {
 		mp, err := v.MountPoint()
 		if err != nil {
 			utils.InternalServerError(w, err)
 			return
 		}
-		config := docker_api_types_volume.Volume{
+		config := docker_api_types.Volume{
 			Name:       v.Name(),
 			Driver:     v.Driver(),
 			Mountpoint: mp,
@@ -74,7 +74,7 @@ func ListVolumes(w http.ResponseWriter,
 		}
 		volumeConfigs = append(volumeConfigs, &config)
 	}
-	response := docker_api_types_volume.ListResponse{
+	response := docker_api_types_volume.VolumeListOKBody{
 		Volumes:  volumeConfigs,
 		Warnings: []string{},
 	}
@@ -95,7 +95,7 @@ func CreateVolume(w http.ResponseWriter,
 		return
 	}
 	// decode params from body
-	input := docker_api_types_volume.CreateOptions{}
+	input := docker_api_types_volume.VolumeCreateBody{}
 	if err := json.NewDecoder(r.Body).Decode(&input); err != nil {
 		utils.Error(w, http.StatusInternalServerError, fmt.Errorf("Decode(): %w", err))
 		return
@@ -122,7 +122,7 @@ func CreateVolume(w http.ResponseWriter,
 			utils.InternalServerError(w, err)
 			return
 		}
-		response := docker_api_types_volume.Volume{
+		response := docker_api_types.Volume{
 			CreatedAt:  existingVolume.CreatedTime().Format(time.RFC3339),
 			Driver:     existingVolume.Driver(),
 			Labels:     existingVolume.Labels(),
@@ -167,7 +167,7 @@ func CreateVolume(w http.ResponseWriter,
 		utils.InternalServerError(w, err)
 		return
 	}
-	volResponse := docker_api_types_volume.Volume{
+	volResponse := docker_api_types.Volume{
 		Name:       config.Name,
 		Driver:     config.Driver,
 		Mountpoint: mp,
@@ -197,7 +197,7 @@ func InspectVolume(w http.ResponseWriter
 		utils.InternalServerError(w, err)
 		return
 	}
-	volResponse := docker_api_types_volume.Volume{
+	volResponse := docker_api_types.Volume{
 		Name:       vol.Name(),
 		Driver:     vol.Driver(),
 		Mountpoint: mp,
Index: libpod/pkg/api/handlers/swagger/responses.go
===================================================================
--- libpod.orig/pkg/api/handlers/swagger/responses.go
+++ libpod/pkg/api/handlers/swagger/responses.go
@@ -240,7 +240,7 @@ type containersList struct {
 // swagger:response
 type volumeInspect struct {
 	// in:body
-	Body dockerVolume.Volume
+	Body dockerAPI.Volume
 }
 
 // Volume prune
@@ -254,7 +254,7 @@ type volumePruneResponse struct {
 // swagger:response
 type volumeList struct {
 	// in:body
-	Body dockerVolume.ListResponse
+	Body dockerVolume.VolumeListOKBody
 }
 
 // Volume list
Index: libpod/test/apiv2/45-system.at
===================================================================
--- libpod.orig/test/apiv2/45-system.at
+++ libpod/test/apiv2/45-system.at
@@ -7,7 +7,7 @@
 t POST 'libpod/system/prune?volumes=true&all=true' params='' 200
 
 ## podman system df
-t GET system/df 200 '{"LayersSize":0,"Images":[],"Containers":[],"Volumes":[],"BuildCache":[]}'
+t GET system/df 200 '{"LayersSize":0,"Images":[],"Containers":[],"Volumes":[],"BuildCache":[],"BuilderSize":0}'
 t GET libpod/system/df 200 '{"ImagesSize":0,"Images":[],"Containers":[],"Volumes":[]}'
 
 # Create volume. We expect df to report this volume next invocation of system/df
