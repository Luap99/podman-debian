From: Reinhard Tartler <siretart@tauware.de>
Subject: Revert 3e6bfb6e9974b18f8567a52c82dd2f131dc5cbd3
Forwarded-upstream: not-needed

Index: libpod/pkg/api/handlers/compat/containers.go
===================================================================
--- libpod.orig/pkg/api/handlers/compat/containers.go
+++ libpod/pkg/api/handlers/compat/containers.go
@@ -23,7 +23,6 @@ import (
 	"github.com/containers/podman/v5/pkg/signal"
 	"github.com/containers/podman/v5/pkg/util"
 	"github.com/docker/docker/api/types"
-	dockerBackend "github.com/docker/docker/api/types/backend"
 	"github.com/docker/docker/api/types/container"
 	"github.com/docker/docker/api/types/network"
 	"github.com/docker/go-connections/nat"
@@ -398,7 +397,7 @@ func LibpodToContainer(l *libpod.Contain
 			NetworkSettings: &networkSettings,
 			Mounts:          mounts,
 		},
-		ContainerCreateConfig: dockerBackend.ContainerCreateConfig{},
+		ContainerCreateConfig: types.ContainerCreateConfig{},
 	}, nil
 }
 
Index: libpod/pkg/api/handlers/compat/containers_create.go
===================================================================
--- libpod.orig/pkg/api/handlers/compat/containers_create.go
+++ libpod/pkg/api/handlers/compat/containers_create.go
@@ -308,13 +308,8 @@ func cliOpts(cc handlers.CreateContainer
 		NoHosts:        rtc.Containers.NoHosts,
 	}
 
-	// docker-compose sets the mac address on the container config instead
-	// on the per network endpoint config
-	//
-	// This field is deprecated since API v1.44 where
-	// EndpointSettings.MacAddress is used instead (and has precedence
-	// below).  Let's still use it for backwards compat.
-	containerMacAddress := cc.MacAddress //nolint:staticcheck
+	// sigh docker-compose sets the mac address on the container config instead on the per network endpoint config
+	containerMacAddress := cc.MacAddress
 
 	// network names
 	switch {
@@ -571,7 +566,7 @@ func cliOpts(cc handlers.CreateContainer
 	}
 
 	if len(cc.HostConfig.RestartPolicy.Name) > 0 {
-		policy := string(cc.HostConfig.RestartPolicy.Name)
+		policy := cc.HostConfig.RestartPolicy.Name
 		// only add restart count on failure
 		if cc.HostConfig.RestartPolicy.IsOnFailure() {
 			policy += fmt.Sprintf(":%d", cc.HostConfig.RestartPolicy.MaximumRetryCount)
Index: libpod/pkg/api/handlers/compat/images.go
===================================================================
--- libpod.orig/pkg/api/handlers/compat/images.go
+++ libpod/pkg/api/handlers/compat/images.go
@@ -25,7 +25,6 @@ import (
 	"github.com/containers/storage"
 	docker "github.com/docker/docker/api/types"
 	dockerContainer "github.com/docker/docker/api/types/container"
-	dockerImage "github.com/docker/docker/api/types/image"
 	"github.com/docker/go-connections/nat"
 	"github.com/opencontainers/go-digest"
 	"github.com/sirupsen/logrus"
@@ -397,7 +396,7 @@ func imageDataToImageInspect(ctx context
 		DockerVersion:   info.Version,
 		GraphDriver:     graphDriver,
 		ID:              "sha256:" + l.ID(),
-		Metadata:        dockerImage.Metadata{},
+		Metadata:        docker.ImageMetadata{},
 		Os:              info.Os,
 		OsVersion:       info.Version,
 		Parent:          info.Parent,
Index: libpod/pkg/api/handlers/compat/images_prune.go
===================================================================
--- libpod.orig/pkg/api/handlers/compat/images_prune.go
+++ libpod/pkg/api/handlers/compat/images_prune.go
@@ -14,7 +14,6 @@ import (
 	"github.com/containers/podman/v5/pkg/domain/infra/abi"
 	"github.com/containers/podman/v5/pkg/util"
 	"github.com/docker/docker/api/types"
-	dockerImage "github.com/docker/docker/api/types/image"
 )
 
 func PruneImages(w http.ResponseWriter, r *http.Request) {
@@ -42,7 +41,7 @@ func PruneImages(w http.ResponseWriter,
 		return
 	}
 
-	idr := make([]dockerImage.DeleteResponse, 0, len(imagePruneReports))
+	idr := make([]types.ImageDeleteResponseItem, 0, len(imagePruneReports))
 	var reclaimedSpace uint64
 	var errorMsg bytes.Buffer
 	for _, p := range imagePruneReports {
@@ -54,7 +53,7 @@ func PruneImages(w http.ResponseWriter,
 			continue
 		}
 
-		idr = append(idr, dockerImage.DeleteResponse{
+		idr = append(idr, types.ImageDeleteResponseItem{
 			Deleted: p.Id,
 		})
 		reclaimedSpace += p.Size
Index: libpod/pkg/api/handlers/compat/info.go
===================================================================
--- libpod.orig/pkg/api/handlers/compat/info.go
+++ libpod/pkg/api/handlers/compat/info.go
@@ -17,9 +17,9 @@ import (
 	"github.com/containers/podman/v5/pkg/api/handlers/utils"
 	api "github.com/containers/podman/v5/pkg/api/types"
 	"github.com/containers/podman/v5/pkg/rootless"
+	docker "github.com/docker/docker/api/types"
 	"github.com/docker/docker/api/types/registry"
 	"github.com/docker/docker/api/types/swarm"
-	dockerSystem "github.com/docker/docker/api/types/system"
 	"github.com/google/uuid"
 	"github.com/opencontainers/selinux/go-selinux"
 	log "github.com/sirupsen/logrus"
@@ -53,7 +53,7 @@ func GetInfo(w http.ResponseWriter, r *h
 	// liveRestoreEnabled := criu.CheckForCriu() && configInfo.RuntimeSupportsCheckpoint()
 
 	info := &handlers.Info{
-		Info: dockerSystem.Info{
+		Info: docker.Info{
 			Architecture:       goRuntime.GOARCH,
 			BridgeNfIP6tables:  !sysInfo.BridgeNFCallIP6TablesDisabled,
 			BridgeNfIptables:   !sysInfo.BridgeNFCallIPTablesDisabled,
@@ -64,7 +64,7 @@ func GetInfo(w http.ResponseWriter, r *h
 			CgroupDriver:       configInfo.Engine.CgroupManager,
 			ClusterAdvertise:   "",
 			ClusterStore:       "",
-			ContainerdCommit:   dockerSystem.Commit{},
+			ContainerdCommit:   docker.Commit{},
 			Containers:         infoData.Store.ContainerStore.Number,
 			ContainersPaused:   stateInfo[define.ContainerStatePaused],
 			ContainersRunning:  stateInfo[define.ContainerStateRunning],
@@ -83,7 +83,7 @@ func GetInfo(w http.ResponseWriter, r *h
 			Images:             infoData.Store.ImageStore.Number,
 			IndexServerAddress: "",
 			InitBinary:         "",
-			InitCommit:         dockerSystem.Commit{},
+			InitCommit:         docker.Commit{},
 			Isolation:          "",
 			KernelMemoryTCP:    false,
 			KernelVersion:      infoData.Host.Kernel,
@@ -103,14 +103,14 @@ func GetInfo(w http.ResponseWriter, r *h
 			OomKillDisable:     sysInfo.OomKillDisable,
 			OperatingSystem:    infoData.Host.Distribution.Distribution,
 			PidsLimit:          sysInfo.PidsLimit,
-			Plugins: dockerSystem.PluginsInfo{
+			Plugins: docker.PluginsInfo{
 				Volume:  infoData.Plugins.Volume,
 				Network: infoData.Plugins.Network,
 				Log:     infoData.Plugins.Log,
 			},
 			ProductLicense:  "Apache-2.0",
 			RegistryConfig:  getServiceConfig(runtime),
-			RuncCommit:      dockerSystem.Commit{},
+			RuncCommit:      docker.Commit{},
 			Runtimes:        getRuntimes(configInfo),
 			SecurityOptions: getSecOpts(sysInfo),
 			ServerVersion:   versionInfo.Version,
@@ -192,12 +192,13 @@ func getSecOpts(sysInfo *sysinfo.SysInfo
 	return secOpts
 }
 
-func getRuntimes(configInfo *config.Config) map[string]dockerSystem.RuntimeWithStatus {
-	runtimes := map[string]dockerSystem.RuntimeWithStatus{}
+func getRuntimes(configInfo *config.Config) map[string]docker.Runtime {
+	runtimes := map[string]docker.Runtime{}
 	for name, paths := range configInfo.Engine.OCIRuntimes {
-		runtime := dockerSystem.RuntimeWithStatus{}
-		runtime.Runtime = dockerSystem.Runtime{Path: paths[0], Args: nil}
-		runtimes[name] = runtime
+		runtimes[name] = docker.Runtime{
+			Path: paths[0],
+			Args: nil,
+		}
 	}
 	return runtimes
 }
Index: libpod/pkg/api/handlers/compat/networks.go
===================================================================
--- libpod.orig/pkg/api/handlers/compat/networks.go
+++ libpod/pkg/api/handlers/compat/networks.go
@@ -279,10 +279,7 @@ func CreateNetwork(w http.ResponseWriter
 	}
 
 	opts := nettypes.NetworkCreateOptions{
-		// networkCreate.CheckDuplicate is deprecated since API v1.44,
-		// but it defaults to true when sent by the client package to
-		// older daemons.
-		IgnoreIfExists: false,
+		IgnoreIfExists: !networkCreate.CheckDuplicate,
 	}
 	ic := abi.ContainerEngine{Libpod: runtime}
 	newNetwork, err := ic.NetworkCreate(r.Context(), network, &opts)
Index: libpod/pkg/api/handlers/compat/system.go
===================================================================
--- libpod.orig/pkg/api/handlers/compat/system.go
+++ libpod/pkg/api/handlers/compat/system.go
@@ -11,7 +11,6 @@ import (
 	"github.com/containers/podman/v5/pkg/domain/entities"
 	"github.com/containers/podman/v5/pkg/domain/infra/abi"
 	docker "github.com/docker/docker/api/types"
-	dockerImage "github.com/docker/docker/api/types/image"
 )
 
 func GetDiskUsage(w http.ResponseWriter, r *http.Request) {
@@ -24,9 +23,9 @@ func GetDiskUsage(w http.ResponseWriter,
 		return
 	}
 
-	imgs := make([]*dockerImage.Summary, len(df.Images))
+	imgs := make([]*docker.ImageSummary, len(df.Images))
 	for i, o := range df.Images {
-		t := dockerImage.Summary{
+		t := docker.ImageSummary{
 			Containers:  int64(o.Containers),
 			Created:     o.Created.Unix(),
 			ID:          o.ImageID,
Index: libpod/pkg/api/handlers/swagger/responses.go
===================================================================
--- libpod.orig/pkg/api/handlers/swagger/responses.go
+++ libpod/pkg/api/handlers/swagger/responses.go
@@ -10,7 +10,6 @@ import (
 	"github.com/containers/podman/v5/pkg/domain/entities/reports"
 	"github.com/containers/podman/v5/pkg/inspect"
 	dockerAPI "github.com/docker/docker/api/types"
-	dockerImage "github.com/docker/docker/api/types/image"
 	dockerVolume "github.com/docker/docker/api/types/volume"
 )
 
@@ -220,7 +219,7 @@ type execSessionInspect struct {
 // swagger:response
 type imageList struct {
 	// in:body
-	Body []dockerImage.Summary
+	Body []dockerAPI.ImageSummary
 }
 
 // Image summary for libpod API
Index: libpod/pkg/api/handlers/types.go
===================================================================
--- libpod.orig/pkg/api/handlers/types.go
+++ libpod/pkg/api/handlers/types.go
@@ -3,15 +3,13 @@ package handlers
 import (
 	"github.com/containers/podman/v5/pkg/domain/entities"
 	docker "github.com/docker/docker/api/types"
-	dockerBackend "github.com/docker/docker/api/types/backend"
 	dockerContainer "github.com/docker/docker/api/types/container"
 	dockerNetwork "github.com/docker/docker/api/types/network"
-	"github.com/docker/docker/api/types/registry"
 	"github.com/opencontainers/runtime-spec/specs-go"
 )
 
 type AuthConfig struct {
-	registry.AuthConfig
+	docker.AuthConfig
 }
 
 type ImageInspect struct {
@@ -87,7 +85,7 @@ type Info struct {
 
 type Container struct {
 	docker.Container
-	dockerBackend.ContainerCreateConfig
+	docker.ContainerCreateConfig
 }
 
 type DiskUsage struct {
Index: libpod/pkg/domain/entities/events.go
===================================================================
--- libpod.orig/pkg/domain/entities/events.go
+++ libpod/pkg/domain/entities/events.go
@@ -21,11 +21,11 @@ func ConvertToLibpodEvent(e Event) *libp
 			return nil
 		}
 	}
-	status, err := libpodEvents.StringToStatus(string(e.Action))
+	status, err := libpodEvents.StringToStatus(e.Action)
 	if err != nil {
 		return nil
 	}
-	t, err := libpodEvents.StringToType(string(e.Type))
+	t, err := libpodEvents.StringToType(e.Type)
 	if err != nil {
 		return nil
 	}
@@ -82,8 +82,8 @@ func ConvertToEntitiesEvent(e libpodEven
 		Status: e.Status.String(),
 		ID:     e.ID,
 		From:   e.Image,
-		Type:   dockerEvents.Type(e.Type.String()),
-		Action: dockerEvents.Action(e.Status.String()),
+		Type:   e.Type.String(),
+		Action: e.Status.String(),
 		Actor: dockerEvents.Actor{
 			ID:         e.ID,
 			Attributes: attributes,
Index: libpod/test/apiv2/35-networks.at
===================================================================
--- libpod.orig/test/apiv2/35-networks.at
+++ libpod/test/apiv2/35-networks.at
@@ -104,10 +104,9 @@ t GET networks/podman 200 \
 
 # network create docker
 t POST networks/create Name=net3\ IPAM='{"Config":[]}' 201
-# Since Docker API 1.44, the server always checks for duplicate networks, even
-# when the deprecated CheckDuplicate parameter is set
-t POST networks/create Name=net3 409
-t POST networks/create Name=net3\ CheckDuplicate=false 409
+# create with same name should not error unless CheckDuplicate is set
+t POST networks/create Name=net3 201
+t POST networks/create Name=net3\ CheckDuplicate=true 409
 # network delete docker
 t DELETE networks/net3 204
 
